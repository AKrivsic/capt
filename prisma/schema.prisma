generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Plan {
  FREE
  TEXT_STARTER
  TEXT_PRO
  VIDEO_LITE
  VIDEO_PRO
  VIDEO_UNLIMITED
}

enum UsageKind {
  GENERATION
  DEMO
}

enum SubtitleStyle {
  BARBIE
  BADDIE
  INNOCENT
  FUNNY
  GLAMOUR
  EDGY
  RAGE
  MEME
  STREAMER
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

enum SkuCode {
  PACK_STARTER_3
  PACK_CREATOR_10
  PACK_PRO_30
  ADMIN_CREDITS
  EXTRA_10_VIDEOS
  EXTRA_25_VIDEOS
  EXTRA_50_VIDEOS
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)

  marketingConsent   Boolean?
  marketingConsentAt DateTime?

  deletedAt DateTime?

  // ‚úÖ UTM & Affiliate tracking
  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmContent   String?
  affiliateId  String?
  referralCode String?

  // ‚úÖ STARTER plan tracking
  starterPurchasedAt DateTime? // Kdy byl zakoupen STARTER pl√°n (pro 3-denn√≠ lh≈Øtu)
  
  // ‚úÖ Video subtitle credits
  videoCredits Int @default(0)
  
  // ‚úÖ Stripe customer ID for subscription management
  stripeCustomerId String? @unique
  
  // ‚úÖ Text generation limits (monthly)
  textGenerationsLeft Int @default(3)    // Zb√Ωvaj√≠c√≠ generace
  textGenerationsUsed Int @default(0)    // Pou≈æit√© generace

  accounts  Account[]
  sessions  Session[]
  histories History[]
  usages    Usage[]

  consentLogs ConsentLog[]
  videoFiles VideoFile[]
  subtitleJobs SubtitleJob[]
  purchases Purchase[]
  videoUsages VideoUsage[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  LoginDevice LoginDevice[]
}

model ConsentLog {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  scope     String // "marketing"
  value     Boolean // true = opt-in, false = opt-out
  ip        String?
  userAgent String?
  sourceUrl String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model History {
  id        String   @id @default(cuid())
  userId    String?
  prompt    String
  outputs   Json
  liked     Boolean?
  platform  String?
  variant   Int?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model Usage {
  id        String    @id @default(cuid())
  userId    String?
  ip        String?
  ipHash    String? // üëà chybƒõj√≠c√≠ pole doplnƒõno
  date      String
  kind      UsageKind
  count     Int       @default(0)
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@unique([userId, date, kind], name: "userId_date_kind")
  @@unique([ipHash, date, kind], name: "ipHash_date_kind")
  @@index([date, kind])
}

model EmailEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  to        String?
  from      String?
  subject   String?
  messageId String?
  details   Json
}

model LoginDevice {
  id          String   @id @default(cuid())
  userId      String
  fingerprint String
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  count       Int      @default(1)
  lastIp      String?
  lastUA      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fingerprint])
  @@index([userId, lastSeen])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  source    String   // "stripe" | "mailerlite" | "rewardful"
  eventId   String   // provider's event ID
  processed Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@unique([source, eventId])
  @@index([source, createdAt])
}

model VideoFile {
  id           String   @id @default(cuid())
  userId       String
  storageKey   String   // S3/R2 object key
  originalName String
  durationSec  Float?   // video d√©lka v sekund√°ch  
  fileSizeBytes Int?    // velikost souboru v bytech
  mimeType     String?  // MIME type (video/mp4, video/mov, atd.)
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtitleJobs SubtitleJob[]

  @@index([userId, createdAt])
  @@index([storageKey])
}

model SubtitleJob {
  id                String        @id @default(cuid())
  userId            String
  videoFileId       String
  style             SubtitleStyle
  status            JobStatus     @default(QUEUED)
  progress          Int           @default(0) // 0-100
  resultStorageKey  String?       // fin√°ln√≠ video s titulky
  errorMessage      String?
  transcriptJson    Json?         // STT v√Ωsledek (words s timestampy)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  startedAt         DateTime?     // kdy zaƒçal processing
  completedAt       DateTime?     // kdy skonƒçil (success/fail)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoFile VideoFile @relation(fields: [videoFileId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status, createdAt])
  @@index([videoFileId])
}

model VideoUsage {
  id        String   @id @default(cuid())
  userId    String?  // null pro demo u≈æivatele
  ip        String?  // pro demo tracking
  duration  Float    // d√©lka videa v sekund√°ch
  createdAt DateTime @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([ip, createdAt])
}

model Purchase {
  id                    String   @id @default(cuid())
  userId                String
  sku                   SkuCode
  creditsDelta          Int      // kolik kredit≈Ø p≈ôidal
  amountUsd             Int      // cena v centech (nap≈ô. 600 = $6.00)
  stripePaymentIntentId String   @unique
  createdAt             DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([stripePaymentIntentId])
}
