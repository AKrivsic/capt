generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  STARTER
  PRO
  PREMIUM
}

enum UsageKind {
  GENERATION
  DEMO
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  plan          Plan      @default(FREE)

  marketingConsent   Boolean?
  marketingConsentAt DateTime?

  deletedAt DateTime?

  accounts  Account[]
  sessions  Session[]
  histories History[]
  usages    Usage[]

  consentLogs ConsentLog[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  LoginDevice LoginDevice[]
}

model ConsentLog {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  scope     String // "marketing"
  value     Boolean // true = opt-in, false = opt-out
  ip        String?
  userAgent String?
  sourceUrl String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model History {
  id        String   @id @default(cuid())
  userId    String?
  prompt    String
  outputs   Json
  liked     Boolean?
  platform  String?
  variant   Int?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model Usage {
  id        String    @id @default(cuid())
  userId    String?
  ip        String?
  ipHash    String? // ðŸ‘ˆ chybÄ›jÃ­cÃ­ pole doplnÄ›no
  date      String
  kind      UsageKind
  count     Int       @default(0)
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@unique([userId, date, kind], name: "userId_date_kind")
  @@unique([ipHash, date, kind], name: "ipHash_date_kind")
  @@index([date, kind])
}

model EmailEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  to        String?
  from      String?
  subject   String?
  messageId String?
  details   Json
}

model LoginDevice {
  id          String   @id @default(cuid())
  userId      String
  fingerprint String
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  count       Int      @default(1)
  lastIp      String?
  lastUA      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, fingerprint])
  @@index([userId, lastSeen])
}
